.inputContainer {
  position: relative;
}

.inputContainer svg {
  position: absolute;
  z-index: 10;
  top: 50%;
  left: 10px;
  transform: translateY(-50%);
  color: var(--greyColor);
}

.input {
  width: 100%;
  height: 44px;
  border: 1px solid var(--borderColor);
  border-radius: var(--secondaryBorderRadius);
  padding: 8px 8px 8px 40px;
  font-family: Inter;
  color: var(--primaryFontColor);
  font-weight: var(--primaryFontWeight);
  font-size: var(--secondaryFontSize);
  letter-spacing: 0.04em;
  transition: border-color var(--transitionDurationAndFunc);
}

.authFormInput {
  composes: input;
  height: 60px;
  padding: 8px 40px 8px;
  font-size: var(--otherFontSize);
}

.input:focus {
  outline: none;
  border-color: var(--primaryColor);
}

.input:focus + svg {
  transition: color var(--transitionDurationAndFunc);
  color: var(--primaryColor);
}

/*   
  
`;

export const Label = styled.label`
  display: flex;
  align-items: center;
  justify-content: center;
  & input {
    position: fixed;
    transform: scale(0);
  }
  &:has([type='checkbox']) svg {
    width: ${({ formType }: IStyledProps) => setInputHeight(formType)};
    height: 100%;
    padding: ${({ theme }) => theme.spacing(2)};
    border: 1px solid;
    border-color: ${({ formType, checked }) =>
      checked ? 'transparent' : setInputBorderColor(formType)};
    border-radius: ${({ formType }) => setInputBorderRadius(formType)};
    background-color: ${({ theme, checked }) =>
      checked ? theme.colors.otherColor : 'transparent'};
    color: ${({ theme, checked }) =>
      checked ? theme.colors.whiteColor : 'transparent'};
    cursor: pointer;
    transition: box-shadow ${({ theme }) => theme.transitionDurationAndFunc},
      background-color ${({ theme }) => theme.transitionDurationAndFunc},
      color ${({ theme }) => theme.transitionDurationAndFunc},
      border-color ${({ theme }) => theme.transitionDurationAndFunc};
    &:hover,
    &:focus {
      box-shadow: ${({ theme }) => theme.shadows.primaryShadow};
    }
  }
`; */
